L.DynamicSegmentation=L.Layer.extend({initialize:function(t){L.setOptions(this,t),this._segments=[],this._dynamicDataUrl=t.dynamicDataUrl,this._styleConfig=this._parseStyleOptions(t.style||{})},onAdd:function(t){this._map=t,this._loadBaseData()},_loadBaseData:function(){var t=this;fetch(this.options.baseDataUrl).then(t=>{if(!t.ok)throw Error("Base data fetch error: "+t.statusText);return t.json()}).then(e=>{t._baseLayer=L.geoJSON(e,{style:{color:"blue"}}),t._loadDynamicData()}).catch(e=>{console.error("Error loading base data:",e),L.popup().setLatLng(t._map.getCenter()).setContent("Error loading base data. Please try again later.").openOn(t._map)})},_validateDynamicData:function(t){return t.features.every(t=>t.properties[this.options.idAttribute]&&t.properties[this.options.startAttribute]>=0&&t.properties[this.options.endAttribute]>=t.properties[this.options.startAttribute]&&t.properties[this.options.styleAttribute])},_loadDynamicData:function(){var t=this;fetch(this._dynamicDataUrl).then(t=>t.json()).then(e=>{if(!t._validateDynamicData(e))throw console.error("Invalid dynamic data format."),Error("Invalid dynamic data format.");t._processDynamicData(e)}).catch(e=>{console.error("Error loading dynamic data:",e),L.popup().setLatLng(t._map.getCenter()).setContent("Error loading dynamic data. Please try again later.").openOn(t._map)})},_processDynamicData:function(t){var e=this,n=[],a=this.options.idAttribute,i=this.options.startAttribute,r=this.options.endAttribute;this._baseLayer.eachLayer(function(s){var o=s.feature.geometry.coordinates;if("MultiLineString"===s.feature.geometry.type)o.forEach(function(o){var p=e._calculateLineLength(o),l=t.features.filter(t=>t.properties[a]===s.feature.properties[a]).map(t=>({start:t.properties[i],end:t.properties[r],value:t.properties[e.options.styleAttribute]}));if(l.length>0){let u=l[l.length-1];u.end<p&&l.push({start:u.end,end:p,value:u.value})}else l=[{start:0,end:p,value:0}];var h=e._segmentLineByRealDistance(o,l);n=n.concat(h)});else{var p=e._calculateLineLength(o),l=t.features.filter(t=>t.properties[a]===s.feature.properties[a]).map(t=>({start:t.properties[i],end:t.properties[r],value:t.properties[e.options.styleAttribute]}));if(l.length>0){let u=l[l.length-1];u.end<p&&l.push({start:u.end,end:p,value:u.value})}else l=[{start:0,end:p,value:0}];var h=e._segmentLineByRealDistance(o,l);n=n.concat(h)}}),this._segmentLayer&&this._map.removeLayer(this._segmentLayer),this._segmentLayer=L.geoJSON(n,{style:e._styleSegment.bind(e),onEachFeature:e._onEachFeature.bind(e)}).addTo(e._map)},_calculateLineLength:function(t){for(var e=0,n=0;n<t.length-1;n++)e+=this._map.distance([t[n][1],t[n][0]],[t[n+1][1],t[n+1][0]]);return e/1e3},_findPointIndexForDistance:function(t,e){for(var n=0,a=0;a<t.length-1;a++)if((n+=this._map.distance([t[a][1],t[a][0]],[t[a+1][1],t[a+1][0]])/1e3)>=e)return a;return t.length-2},_segmentLineByRealDistance:function(t,e){var n=[];return e.forEach(e=>{var a=this._findPointIndexForDistance(t,e.start),i=this._findPointIndexForDistance(t,e.end);i=Math.min(i,t.length-1);var r=t.slice(a,i+2);r.length>1&&n.push({type:"Feature",geometry:{type:"LineString",coordinates:r},properties:{[this.options.startAttribute]:e.start,[this.options.endAttribute]:e.end,[this.options.styleAttribute]:e.value}})}),n},_styleSegment:function(t){var e=t.properties[this.options.styleAttribute];return{color:this._getColorForValue(e),weight:4}},_getColorForValue:function(t){var e=this._styleConfig;for(var n in e.intervals){var[a,i,r]=e.intervals[n];if(t>=a&&t<=i)return r}return e.exact[t]||"grey"},_parseStyleOptions:function(t){var e={intervals:{},exact:{}};for(var n in t){var a=t[n];if(n.includes("-")){var[i,r]=n.split("-").map(Number);e.intervals[n]=[i,r,a]}else e.exact[n]=a}return e},_onEachFeature:function(t,e){this.options.showPopup&&(e.on("mouseover",(function(e){var n=this._createPopupContent(t);this._popup=L.popup().setLatLng(e.latlng).setContent(n).openOn(this._map)}).bind(this)),e.on("mouseout",(function(){this._popup&&(this._map.closePopup(this._popup),this._popup=null)}).bind(this)))},_createPopupContent:function(t){var e=t.properties,n=`<strong>Start</strong> ${e[this.options.startAttribute]}<br>`;return n+=`<strong>End:</strong> ${e[this.options.endAttribute]}<br>`,n+=`<strong>Value:</strong> ${e[this.options.styleAttribute]}`},updateDynamicData:function(t){this._dynamicDataUrl=t,this._loadDynamicData()},updateStyleConfig:function(t){this._styleConfig=this._parseStyleOptions(t),this._segmentLayer&&this._segmentLayer.setStyle(this._styleSegment.bind(this))},clearSegments:function(){this._segmentLayer&&(this._map.removeLayer(this._segmentLayer),this._segmentLayer=null)}}),L.dynamicSegmentation=function(t){return new L.DynamicSegmentation(t)};